#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>
#include <vector>
using namespace std;
const int MAXN = 500 + 10; 
const int INF = 1 << 30;
int n, m;
int ans;
int vis[MAXN];
int dis[MAXN];
struct Node{
	int u, v, w;
};
vector <Node> edge[MAXN];
queue <int> q;

void spfa(int pos){
	while(!q.empty()){
		q.pop();
	}
	memset(vis, 0, sizeof(vis));
	for(int i = 1; i <= n; i++){
		dis[i] = INF;
	}
	queue <int> q;
	dis[pos] = 0;
	q.push(pos); 
	vis[pos] = 1;
	while(!q.empty()){
		int u = q.front(); q.pop();
		vis[u] = 0;
		for(int i = 0; i < edge[u].size(); i++){
			int v = edge[u][i].v, w = edge[u][i].w;
			if(dis[v] > dis[u] + w ){
				dis[v] = dis[u] + w;
				if(vis[v] == 0){
					q.push(v);
					vis[v] = 1;
				}
			}
		}
	}
}

int main(){
	int T; cin >> T;
	while(T--){
		int U;
		scanf("%d %d %d", &n, &m);
		for(int i = 0; i < n; i++){
			edge[i].clear();
		}
		for(int i = 0; i < m; i++){
			int u, v, w;
			scanf("%d%d%d", &u, &v, &w);
			if(i == 0) U = u;
			Node temp = {u,v,w};
			Node tempA = {v, u, w};
			edge[u].push_back(temp);
			edge[v].push_back(tempA);
		}
		ans = spfa(U);
	}
	return 0;
}